# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  validate_gradlew:
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v2
      - name: Validate gradlew
        uses: actions/checkout@v2
    
  build_and_test:
    name: Build and Test

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
    - name: Cache .gradle
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: build
      run: ./gradlew build
#     - name: Upload a Build Artifact
#       uses: actions/upload-artifact@v2
#       with:
#         # Artifact name
#         name: build-${{ hashFiles('**/*.kt*') }}
#         # A file, directory or wildcard pattern that describes what to upload
#         path: build
    - name: Run tests
      run: ./gradlew test
    - name: Junit Report to Annotations
      uses: ashley-taylor/junit-report-annotations-action@v1.0
      with:
        # github token
        access-token: ${{ secrets.GITHUB_TOKEN }}
        # glob to junit xml files
        path: build/test-results/test/*.xml
        # max number of failed tests to include
        numFailures: 100
        # path to test source
        testSrcPath: src/test/kotlin/
